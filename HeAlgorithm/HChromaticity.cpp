#include "HChromaticity_p.h"
#include "HMath.h"
#include "HSpecData.h"
#include "HSpecHelper.h"
#include <QtCore/QFile>
#include <QtCore/QtMath>
#include <QtCore/QTextStream>

HE_BEGIN_NAMESPACE

HChromaticityPrivate::HChromaticityPrivate()
{
    cie1931 = std::make_shared<HCie1931>();
    cieDay = std::make_shared<HCieDaylight>();
    isotherm = std::make_shared<HIsotherm>();
    iesTm30 = std::make_shared<HIesTm30>();
}

HChromaticity::HChromaticity() :
    d_ptr(new HChromaticityPrivate)
{
}

HChromaticity::HChromaticity(HChromaticityPrivate &p) :
    d_ptr(&p)
{
}

HChromaticity::~HChromaticity() = default;

void HChromaticity::calcSpectrum(HSpecData *data)
{
    if (data->TestEnergy.isEmpty())
        return;
    data->CoordinateUV = d_ptr->cie1931->calcCoordinateUV(data->TestEnergy);
    data->CoordinateXY = HSpecHelper::uv2xy(data->CoordinateUV);
    data->CoordinateUVp = HSpecHelper::uv2uvp(data->CoordinateUV);
    auto r1 = calcColorTemperatureDuv(data->CoordinateUV);
    auto r2 = d_ptr->cie1931->calcWaveDominantPurity(data->CoordinateXY);
    data->ColorTemperature = r1.first();
    data->Duv = r1.last();
    data->WaveDominant = r2.first();
    data->ColorPurity = r2.last();
    data->RenderingIndex = calcColorRenderingIndex(data->CoordinateUV, data->TestEnergy, data->ColorTemperature);
    data->RenderingIndexAvg = calcColorRenderingIndexAvg(data->RenderingIndex);
    // TM30
    data->ReferenceEnergy = d_ptr->cieDay->calcRefSourceSpectrum(data->ColorTemperature);
    data->ReferenceEnergyPercent = HMath::percentY(data->ReferenceEnergy);
    auto r3 = d_ptr->iesTm30->calc(data->TestEnergy, data->ReferenceEnergy);
    data->TM30_Rf = r3.Rf;
    data->TM30_Rg = r3.Rg;
    data->TM30_Rfi = r3.Rfi.toList();
    data->TM30_hj_at = r3.hj.at.toList();
    data->TM30_hj_bt = r3.hj.bt.toList();
    data->TM30_hj_ar = r3.hj.ar.toList();
    data->TM30_hj_br = r3.hj.br.toList();
    data->TM30_hj_atn = r3.hj.atn.toList();
    data->TM30_hj_btn = r3.hj.btn.toList();
    data->TM30_hj_arn = r3.hj.arn.toList();
    data->TM30_hj_brn = r3.hj.brn.toList();
    data->TM30_hj_Rf = r3.hj.Rf.toList();
    data->TM30_hj_Rcs = r3.hj.Rcs.toList();
    data->TM30_hj_Rhs = r3.hj.Rhs.toList();
}

QLineF HChromaticity::calcIsothermUV(double tc, double duv)
{
    QLineF line;
    auto iso = d_ptr->cie1931->calcIsothermFit(tc);
    auto angle = qRadiansToDegrees(atan(iso.slope));
    if (angle < 0)
        angle = angle + 180;
    line.setP1(QPointF(iso.u, iso.v));
    line.setAngle(angle);
    line.setLength(-duv);
    return line;
}

QLineF HChromaticity::calcIsothermUV(double tc, double duvB, double duvE)
{
    auto line1 = calcIsothermUV(tc, duvB);
    auto line2 = calcIsothermUV(tc, duvE);
    return {line1.p2(), line2.p2()};
}

QLineF HChromaticity::calcIsothermXY(double tc, double duv)
{
    auto line = calcIsothermUV(tc, duv);
    auto p1 = HSpecHelper::uv2xy(line.p1());
    auto p2 = HSpecHelper::uv2xy(line.p2());
    return {p1, p2};
}

QLineF HChromaticity::calcIsothermXY(double tc, double duvB, double duvE)
{
    auto line1 = calcIsothermXY(tc, duvB);
    auto line2 = calcIsothermXY(tc, duvE);
    return {line1.p2(), line2.p2()};
}

bool HChromaticity::exportIsotherm(const QString &fileName, QPointF tc, double interval)
{
    int i,n;
    double t;
    QList<ISOTHERM> isotherm;

    n = ceil((tc.y() - tc.x()) / interval + 1);
    for (i = 0; i < n; i++)
    {
        t = tc.x() + interval * i;
        isotherm << d_ptr->cie1931->calcIsotherm(t);
    }
    return exportIsotherm(fileName, isotherm);
}

bool HChromaticity::exportIsotherm(const QString &fileName)
{
    QList<double> mrecpK;
    QList<ISOTHERM> isotherm;

    mrecpK << 0.01;
    for (int i = 1; i < 601; i++)
        mrecpK << i;
    for (auto k : mrecpK)
        isotherm << d_ptr->cie1931->calcIsotherm(1000000.0 / k);
    return exportIsotherm(fileName, isotherm);
}

bool HChromaticity::exportCieUcs(const QString &fileName, QPointF tc, double interval)
{
    int i,n;
    QList<CIE_UCS> ucs;

    n = ceil((tc.y() - tc.x()) / interval + 1);
    for (i = 0; i < n; i++)
        ucs << calcCieUcs(tc.x() + interval * i);
    return exportCieUcs(fileName, ucs);
}

QList<double> HChromaticity::calcColorTemperatureDuv(QPointF uv)
{
    auto tc = d_ptr->isotherm->calcColorTemperature(uv);
    auto duv = d_ptr->cie1931->calcDuv(uv, tc);
    return QList<double>() << tc << duv;
}

QVector<double> HChromaticity::calcColorRenderingIndex(QPointF uvk, const QPolygonF &spdk, double tc)
{
    auto ucs = calcCieUcs(tc);
    return calcColorRenderingIndex(uvk, spdk, ucs);
}

QVector<double> HChromaticity::calcColorRenderingIndex(QPointF uvk, const QPolygonF &spdk, CIE_UCS refer)
{
    int i;
    double cki,dki;
    QVector<double> Uri(15),Vri(15),Wri(15);
    QVector<double> Uki(15),Vki(15),Wki(15),ukip(15),vkip(15);
    QVector<double> E(15);
    QVector<double> R(15);

    auto ur = refer.ur;
    auto vr = refer.vr;
    auto cr = refer.cr;
    auto dr = refer.dr;
    for (i = 0; i < 15; i++)
    {
        Uri[i] = refer.Ur[i];
        Vri[i] = refer.Vr[i];
        Wri[i] = refer.Wr[i];
    }

    auto cdk = HSpecHelper::uv2cd(uvk);
    auto ck = cdk.x();
    auto dk = cdk.y();
    auto col = d_ptr->cie1931->calcColorReflectance(spdk);
    auto uki = col.at(0);
    auto vki = col.at(1);
    auto Yki = col.at(2);

    for (i = 0; i < 15; i++)
    {
        cki = (4 - uki[i] - 10 * vki[i]) / vki[i];
        dki = (1.708 * vki[i] + 0.404 - 1.481 * uki[i]) / vki[i];
        ukip[i] = (10.872 + 0.404 * cr * cki / ck - 4 * dr * dki / dk) / (16.518 + 1.481 * cr * cki / ck - dr * dki / dk);
        vkip[i] = 5.520 / (16.518 + 1.481 * cr * cki / ck - dr * dki / dk);
        Wki[i] = 25 * pow(Yki[i], 1.0/3) - 17;
        Uki[i] = 13 * Wki[i] * (ukip[i] - ur);
        Vki[i] = 13 * Wki[i] * (vkip[i] - vr);
        E[i] = sqrt(pow(Uri[i] - Uki[i], 2) + pow(Vri[i] - Vki[i], 2) + pow(Wri[i] - Wki[i], 2));
        R[i] = 100 - 4.6 * E[i];
    }
    return R;
}

double HChromaticity::calcColorRenderingIndexAvg(QVector<double> index)
{
    if (index.size() < 8)
        return 0;

    auto ra = 0.0;
    for (int i = 0; i < 8; i++)
        ra += index[i];
    return qMax(0.0, ra / 8.0);
}

CIE_UCS HChromaticity::calcCieUcs(double tc)
{
    auto spd = d_ptr->cieDay->calcRefSourceSpectrum(tc, QPointF(360, 830));
    auto uvt = d_ptr->cie1931->calcIsoCoordinateUV(tc);
    auto uv = d_ptr->cie1931->calcCoordinateUV(spd);
    auto xyt = HSpecHelper::uv2xy(uvt);
    auto cd = HSpecHelper::uv2cd(uv);
    auto col = d_ptr->cie1931->calcColorReflectance(spd);
    auto uri = col.at(0);
    auto vri = col.at(1);
    auto Yri = col.at(2);

    CIE_UCS ucs;
    ucs.Tc = tc;
    ucs.urt = uvt.x();
    ucs.vrt = uvt.y();
    ucs.xt = xyt.x();
    ucs.yt = xyt.y();
    ucs.ur = uv.x();
    ucs.vr = uv.y();
    ucs.cr = cd.x();
    ucs.dr = cd.y();
    for (int i = 0; i < 15; i++)
    {
        ucs.Wr[i] = 25 * pow(Yri[i], 1.0/3) - 17;
        ucs.Ur[i] = 13 * ucs.Wr[i] * (uri[i] - uv.x());
        ucs.Vr[i] = 13 * ucs.Wr[i] * (vri[i] - uv.y());
    }
    return ucs;
}

bool HChromaticity::exportIsotherm(const QString &fileName, QList<ISOTHERM> data)
{
    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
        return false;

    QTextStream out(&file);
    out << "[Isotherm]" << "\t" << data.length() << endl;
    out << " Tc             u               v             Slope" << endl;
    for (auto value : data)
        out << QString::number(value.Tc, 'f', 0) << "\t"
            << QString::number(value.u, 'f', 12) << "\t"
            << QString::number(value.v, 'f', 12) << "\t"
            << QString::number(value.slope, 'f', 12) << endl;
    file.close();
    return true;
}

bool HChromaticity::exportCieUcs(const QString &fileName, QList<CIE_UCS> data)
{
    QFile file(fileName);
    if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
        return false;

    int j;
    QTextStream out(&file);
    out << "[CIE_UCS]" << "\t" << data.length() << endl;
    out << " Tc	      urt	      vrt	   xt	   yt	   ur	   vr	  cr	  dr	 Ur1	 Ur2	 Ur3	 Ur4	 Ur5	 Ur6	 Ur7	 Ur8	 Ur9	Ur10	 Ur11	 Ur12	Ur13	 Ur14   Ur15    Vr1 Vr2 Vr3 Vr4	 Vr5	 Vr6	 Vr7	 Vr8	 Vr9	Vr10	Vr11	 Vr12	Vr13	Vr14    Vr15    Wr1	 Wr2	 Wr3	 Wr4	 Wr5	 Wr6	 Wr7	 Wr8	 Wr9	Wr10	Wr11	Wr12	Wr13	Wr14    Wr15" << endl;
    for (auto value : data)
    {
        out << QString::number(value.Tc, 'f', 0) << "\t"
            << QString::number(value.urt, 'f', 12) << "\t"
            << QString::number(value.vrt, 'f', 12) << "\t"
            << QString::number(value.xt, 'f', 5) << "\t"
            << QString::number(value.yt, 'f', 5) << "\t"
            << QString::number(value.ur, 'f', 4) << "\t"
            << QString::number(value.vr, 'f', 4) << "\t"
            << QString::number(value.cr, 'f', 4) << "\t"
            << QString::number(value.dr, 'f', 4);
        for (j = 0; j < 15; j++)
            out << "\t" << QString::number(value.Ur[j], 'f', 2);
        for (j = 0; j < 15; j++)
            out << "\t" << QString::number(value.Vr[j], 'f', 2);
        for (j = 0; j < 15; j++)
            out << "\t" << QString::number(value.Wr[j], 'f', 2);
        out << endl;
    }
    file.close();
    return true;
}

HE_END_NAMESPACE

//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
//http://www.lrc.rpi.edu/programs/nlpip/lightinganswers/lightsources/appendixb1.asp
//%This script calculates chromaticity coordinates, CCT, CRI, GAI, and FSCI
//%for a 2856 blackbody source (illuminant A).  To use other sources, just
//%replace the spd matrix with the values for the other source.
//%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

//% Light source SPD
//%   The light source spd is entered in a 2-column format as shown below.
//%   [wavelength (nm)    value]
//spd =[                 380       0.00132948037347175;...
//                       390       0.00164023432576807;...
//                       400       0.00199607408541092;...
//                       410       0.00239863299576014;...
//                       420       0.00284898784428011;...
//                       430       0.00334764547822949;...
//                       440       0.00389454498476917;...
//                       450        0.0044890736644276;...
//                       460       0.00513009474369056;...
//                       470       0.00581598464137424;...
//                       480       0.00654467759688934;...
//                       490       0.00731371555834619;...
//                       500       0.00812030138807687;...
//                       510       0.00896135364886274;...
//                       520       0.00983356146587939;...
//                       530        0.0107334382008557;...
//                       540        0.0116573729136429;...
//                       550        0.0126016788131223;...
//                       560        0.0135626381078808;...
//                       570        0.0145365428535139;...
//                       580        0.0155197315558729;...
//                       590        0.0165086214276558;...
//                       600        0.0174997363101301;...
//                       610        0.0184897303639286;...
//                       620        0.0194754077047119;...
//                       630        0.0204537382132532;...
//                       640        0.0214218697874947;...
//                       650         0.022377137328638;...
//                       660        0.0233170687665763;...
//                       670        0.0242393884339735;...
//                       680        0.0251420180949075;...
//                       690        0.0260230759248419;...
//                       700         0.026880873725211;...
//                       710        0.0277139126393038;...
//                       720        0.0285208776174515;...
//                       730        0.0293006308595934;...
//                       740        0.0300522044428256;...
//                       750        0.0307747923210527;...
//                       760        0.0314677418638086;...
//                       770        0.0321305450820022;...
//                       780        0.0327628296700076];
//  wavelength_spd = spd(:,1);
//  spd = spd(:,2);

//% First, obtain reference data values
//% The CIE 1931 2 degree Standard Colorimetric Observer
//% [wavelength(nm)   xbar    ybar zbar]
//CIE31Table = [360 0.000130 0.000004 0.000606;...
//            361 0.000146 0.000004 0.000681;...
//            362 0.000164 0.000005 0.000765;...
//            363 0.000184 0.000006 0.000860;...
//            364 0.000207 0.000006 0.000967;...
//            365 0.000232 0.000007 0.001086;...
//            366 0.000261 0.000008 0.001221;...
//            367 0.000293 0.000009 0.001373;...
//            368 0.000329 0.000010 0.001544;...
//            369 0.000370 0.000011 0.001734;...
//            370 0.000415 0.000012 0.001946;...
//            371 0.000464 0.000014 0.002178;...
//            372 0.000519 0.000016 0.002436;...
//            373 0.000582 0.000017 0.002732;...
//            374 0.000655 0.000020 0.003078;...
//            375 0.000742 0.000022 0.003486;...
//            376 0.000845 0.000025 0.003975;...
//            377 0.000965 0.000028 0.004541;...
//            378 0.001095 0.000032 0.005158;...
//            379 0.001231 0.000035 0.005803;...
//            380 0.001368 0.000039 0.006450;...
//            381 0.001502 0.000043 0.007083;...
//            382 0.001642 0.000047 0.007745;...
//            383 0.001802 0.000052 0.008501;...
//            384 0.001996 0.000057 0.009415;...
//            385 0.002236 0.000064 0.010550;...
//            386 0.002535 0.000072 0.011966;...
//            387 0.002893 0.000082 0.013656;...
//            388 0.003301 0.000094 0.015588;...
//            389 0.003753 0.000106 0.017730;...
//            390 0.004243 0.000120 0.020050;...
//            391 0.004762 0.000135 0.022511;...
//            392 0.005330 0.000151 0.025203;...
//            393 0.005979 0.000170 0.028280;...
//            394 0.006741 0.000192 0.031897;...
//            395 0.007650 0.000217 0.036210;...
//            396 0.008751 0.000247 0.041438;...
//            397 0.010029 0.000281 0.047504;...
//            398 0.011422 0.000319 0.054120;...
//            399 0.012869 0.000357 0.060998;...
//            400 0.014310 0.000396 0.067850;...
//            401 0.015704 0.000434 0.074486;...
//            402 0.017147 0.000473 0.081362;...
//            403 0.018781 0.000518 0.089154;...
//            404 0.020748 0.000572 0.098540;...
//            405 0.023190 0.000640 0.110200;...
//            406 0.026207 0.000725 0.124613;...
//            407 0.029782 0.000825 0.141702;...
//            408 0.033881 0.000941 0.161303;...
//            409 0.038468 0.001070 0.183257;...
//            410 0.043510 0.001210 0.207400;...
//            411 0.048996 0.001362 0.233692;...
//            412 0.055023 0.001531 0.262611;...
//            413 0.061719 0.001720 0.294775;...
//            414 0.069212 0.001935 0.330799;...
//            415 0.077630 0.002180 0.371300;...
//            416 0.086958 0.002455 0.416209;...
//            417 0.097177 0.002764 0.465464;...
//            418 0.108406 0.003118 0.519695;...
//            419 0.120767 0.003526 0.579530;...
//            420 0.134380 0.004000 0.645600;...
//            421 0.149358 0.004546 0.718484;...
//            422 0.165396 0.005159 0.796713;...
//            423 0.181983 0.005829 0.877846;...
//            424 0.198611 0.006546 0.959439;...
//            425 0.214770 0.007300 1.039050;...
//            426 0.230187 0.008087 1.115367;...
//            427 0.244880 0.008909 1.188497;...
//            428 0.258777 0.009768 1.258123;...
//            429 0.271808 0.010664 1.323930;...
//            430 0.283900 0.011600 1.385600;...
//            431 0.294944 0.012573 1.442635;...
//            432 0.304897 0.013583 1.494804;...
//            433 0.313787 0.014630 1.542190;...
//            434 0.321645 0.015715 1.584881;...
//            435 0.328500 0.016840 1.622960;...
//            436 0.334351 0.018007 1.656405;...
//            437 0.339210 0.019214 1.685296;...
//            438 0.343121 0.020454 1.709875;...
//            439 0.346130 0.021718 1.730382;...
//            440 0.348280 0.023000 1.747060;...
//            441 0.349600 0.024295 1.760045;...
//            442 0.350147 0.025610 1.769623;...
//            443 0.350013 0.026959 1.776264;...
//            444 0.349287 0.028351 1.780433;...
//            445 0.348060 0.029800 1.782600;...
//            446 0.346373 0.031311 1.782968;...
//            447 0.344262 0.032884 1.781700;...
//            448 0.341809 0.034521 1.779198;...
//            449 0.339094 0.036226 1.775867;...
//            450 0.336200 0.038000 1.772110;...
//            451 0.333198 0.039847 1.768259;...
//            452 0.330041 0.041768 1.764039;...
//            453 0.326636 0.043766 1.758944;...
//            454 0.322887 0.045843 1.752466;...
//            455 0.318700 0.048000 1.744100;...
//            456 0.314025 0.050244 1.733559;...
//            457 0.308884 0.052573 1.720858;...
//            458 0.303290 0.054981 1.705937;...
//            459 0.297258 0.057459 1.688737;...
//            460 0.290800 0.060000 1.669200;...
//            461 0.283970 0.062602 1.647529;...
//            462 0.276721 0.065278 1.623413;...
//            463 0.268918 0.068042 1.596022;...
//            464 0.260423 0.070911 1.564528;...
//            465 0.251100 0.073900 1.528100;...
//            466 0.240847 0.077016 1.486111;...
//            467 0.229851 0.080266 1.439521;...
//            468 0.218407 0.083667 1.389880;...
//            469 0.206812 0.087233 1.338736;...
//            470 0.195360 0.090980 1.287640;...
//            471 0.184214 0.094918 1.237422;...
//            472 0.173327 0.099046 1.187824;...
//            473 0.162688 0.103367 1.138761;...
//            474 0.152283 0.107885 1.090148;...
//            475 0.142100 0.112600 1.041900;...
//            476 0.132179 0.117532 0.994198;...
//            477 0.122570 0.122674 0.947347;...
//            478 0.113275 0.127993 0.901453;...
//            479 0.104298 0.133453 0.856619;...
//            480 0.095640 0.139020 0.812950;...
//            481 0.087300 0.144676 0.770517;...
//            482 0.079308 0.150469 0.729445;...
//            483 0.071718 0.156462 0.689914;...
//            484 0.064581 0.162718 0.652105;...
//            485 0.057950 0.169300 0.616200;...
//            486 0.051862 0.176243 0.582329;...
//            487 0.046282 0.183558 0.550416;...
//            488 0.041151 0.191274 0.520338;...
//            489 0.036413 0.199418 0.491967;...
//            490 0.032010 0.208020 0.465180;...
//            491 0.027917 0.217120 0.439925;...
//            492 0.024144 0.226735 0.416184;...
//            493 0.020687 0.236857 0.393882;...
//            494 0.017540 0.247481 0.372946;...
//            495 0.014700 0.258600 0.353300;...
//            496 0.012162 0.270185 0.334858;...
//            497 0.009920 0.282294 0.317552;...
//            498 0.007967 0.295050 0.301337;...
//            499 0.006296 0.308578 0.286169;...
//            500 0.004900 0.323000 0.272000;...
//            501 0.003777 0.338402 0.258817;...
//            502 0.002945 0.354686 0.246484;...
//            503 0.002425 0.371699 0.234772;...
//            504 0.002236 0.389288 0.223453;...
//            505 0.002400 0.407300 0.212300;...
//            506 0.002926 0.425630 0.201169;...
//            507 0.003837 0.444310 0.190120;...
//            508 0.005175 0.463394 0.179225;...
//            509 0.006982 0.482940 0.168561;...
//            510 0.009300 0.503000 0.158200;...
//            511 0.012149 0.523569 0.148138;...
//            512 0.015536 0.544512 0.138376;...
//            513 0.019478 0.565690 0.128994;...
//            514 0.023993 0.586965 0.120075;...
//            515 0.029100 0.608200 0.111700;...
//            516 0.034815 0.629346 0.103905;...
//            517 0.041120 0.650307 0.096667;...
//            518 0.047985 0.670875 0.089983;...
//            519 0.055379 0.690842 0.083845;...
//            520 0.063270 0.710000 0.078250;...
//            521 0.071635 0.728185 0.073209;...
//            522 0.080462 0.745464 0.068678;...
//            523 0.089740 0.761969 0.064568;...
//            524 0.099456 0.777837 0.060788;...
//            525 0.109600 0.793200 0.057250;...
//            526 0.120167 0.808110 0.053904;...
//            527 0.131114 0.822496 0.050747;...
//            528 0.142368 0.836307 0.047753;...
//            529 0.153854 0.849492 0.044899;...
//            530 0.165500 0.862000 0.042160;...
//            531 0.177257 0.873811 0.039507;...
//            532 0.189140 0.884962 0.036936;...
//            533 0.201169 0.895494 0.034458;...
//            534 0.213366 0.905443 0.032089;...
//            535 0.225750 0.914850 0.029840;...
//            536 0.238321 0.923735 0.027712;...
//            537 0.251067 0.932092 0.025694;...
//            538 0.263992 0.939923 0.023787;...
//            539 0.277102 0.947225 0.021989;...
//            540 0.290400 0.954000 0.020300;...
//            541 0.303891 0.960256 0.018718;...
//            542 0.317573 0.966007 0.017240;...
//            543 0.331438 0.971261 0.015864;...
//            544 0.345483 0.976023 0.014585;...
//            545 0.359700 0.980300 0.013400;...
//            546 0.374084 0.984092 0.012307;...
//            547 0.388640 0.987418 0.011302;...
//            548 0.403378 0.990313 0.010378;...
//            549 0.418312 0.992812 0.009529;...
//            550 0.433450 0.994950 0.008750;...
//            551 0.448795 0.996711 0.008035;...
//            552 0.464336 0.998098 0.007382;...
//            553 0.480064 0.999112 0.006785;...
//            554 0.495971 0.999748 0.006243;...
//            555 0.512050 1.000000 0.005750;...
//            556 0.528296 0.999857 0.005304;...
//            557 0.544692 0.999305 0.004900;...
//            558 0.561209 0.998325 0.004534;...
//            559 0.577821 0.996899 0.004202;...
//            560 0.594500 0.995000 0.003900;...
//            561 0.611221 0.992601 0.003623;...
//            562 0.627976 0.989743 0.003371;...
//            563 0.644760 0.986444 0.003141;...
//            564 0.661570 0.982724 0.002935;...
//            565 0.678400 0.978600 0.002750;...
//            566 0.695239 0.974084 0.002585;...
//            567 0.712059 0.969171 0.002439;...
//            568 0.728828 0.963857 0.002309;...
//            569 0.745519 0.958135 0.002197;...
//            570 0.762100 0.952000 0.002100;...
//            571 0.778543 0.945450 0.002018;...
//            572 0.794826 0.938499 0.001948;...
//            573 0.810926 0.931163 0.001890;...
//            574 0.826825 0.923458 0.001841;...
//            575 0.842500 0.915400 0.001800;...
//            576 0.857932 0.907006 0.001766;...
//            577 0.873082 0.898277 0.001738;...
//            578 0.887894 0.889205 0.001711;...
//            579 0.902318 0.879782 0.001683;...
//            580 0.916300 0.870000 0.001650;...
//            581 0.929800 0.859861 0.001610;...
//            582 0.942798 0.849392 0.001564;...
//            583 0.955278 0.838622 0.001514;...
//            584 0.967218 0.827581 0.001459;...
//            585 0.978600 0.816300 0.001400;...
//            586 0.989386 0.804795 0.001337;...
//            587 0.999549 0.793082 0.001270;...
//            588 1.009089 0.781192 0.001205;...
//            589 1.018006 0.769155 0.001147;...
//            590 1.026300 0.757000 0.001100;...
//            591 1.033983 0.744754 0.001069;...
//            592 1.040986 0.732422 0.001049;...
//            593 1.047188 0.720004 0.001036;...
//            594 1.052467 0.707496 0.001021;...
//            595 1.056700 0.694900 0.001000;...
//            596 1.059794 0.682219 0.000969;...
//            597 1.061799 0.669472 0.000930;...
//            598 1.062807 0.656674 0.000887;...
//            599 1.062910 0.643845 0.000843;...
//            600 1.062200 0.631000 0.000800;...
//            601 1.060735 0.618155 0.000761;...
//            602 1.058444 0.605314 0.000724;...
//            603 1.055224 0.592476 0.000686;...
//            604 1.050977 0.579638 0.000645;...
//            605 1.045600 0.566800 0.000600;...
//            606 1.039037 0.553961 0.000548;...
//            607 1.031361 0.541137 0.000492;...
//            608 1.022666 0.528353 0.000435;...
//            609 1.013048 0.515632 0.000383;...
//            610 1.002600 0.503000 0.000340;...
//            611 0.991367 0.490469 0.000307;...
//            612 0.979331 0.478030 0.000283;...
//            613 0.966492 0.465678 0.000265;...
//            614 0.952848 0.453403 0.000252;...
//            615 0.938400 0.441200 0.000240;...
//            616 0.923194 0.429080 0.000230;...
//            617 0.907244 0.417036 0.000221;...
//            618 0.890502 0.405032 0.000212;...
//            619 0.872920 0.393032 0.000202;...
//            620 0.854450 0.381000 0.000190;...
//            621 0.835084 0.368918 0.000174;...
//            622 0.814946 0.356827 0.000156;...
//            623 0.794186 0.344777 0.000136;...
//            624 0.772954 0.332818 0.000117;...
//            625 0.751400 0.321000 0.000100;...
//            626 0.729584 0.309338 0.000086;...
//            627 0.707589 0.297850 0.000075;...
//            628 0.685602 0.286594 0.000065;...
//            629 0.663810 0.275624 0.000057;...
//            630 0.642400 0.265000 0.000050;...
//            631 0.621515 0.254763 0.000044;...
//            632 0.601114 0.244890 0.000039;...
//            633 0.581105 0.235334 0.000036;...
//            634 0.561398 0.226053 0.000033;...
//            635 0.541900 0.217000 0.000030;...
//            636 0.522599 0.208162 0.000028;...
//            637 0.503546 0.199549 0.000026;...
//            638 0.484744 0.191155 0.000024;...
//            639 0.466194 0.182974 0.000022;...
//            640 0.447900 0.175000 0.000020;...
//            641 0.429861 0.167224 0.000018;...
//            642 0.412098 0.159646 0.000016;...
//            643 0.394644 0.152278 0.000014;...
//            644 0.377533 0.145126 0.000012;...
//            645 0.360800 0.138200 0.000010;...
//            646 0.344456 0.131500 0.000008;...
//            647 0.328517 0.125025 0.000005;...
//            648 0.313019 0.118779 0.000003;...
//            649 0.298001 0.112769 0.000001;...
//            650 0.283500 0.107000 0.000000;...
//            651 0.269545 0.101476 0.000000;...
//            652 0.256118 0.096189 0.000000;...
//            653 0.243190 0.091123 0.000000;...
//            654 0.230727 0.086265 0.000000;...
//            655 0.218700 0.081600 0.000000;...
//            656 0.207097 0.077121 0.000000;...
//            657 0.195923 0.072826 0.000000;...
//            658 0.185171 0.068710 0.000000;...
//            659 0.174832 0.064770 0.000000;...
//            660 0.164900 0.061000 0.000000;...
//            661 0.155367 0.057396 0.000000;...
//            662 0.146230 0.053955 0.000000;...
//            663 0.137490 0.050674 0.000000;...
//            664 0.129147 0.047550 0.000000;...
//            665 0.121200 0.044580 0.000000;...
//            666 0.113640 0.041759 0.000000;...
//            667 0.106465 0.039085 0.000000;...
//            668 0.099690 0.036564 0.000000;...
//            669 0.093331 0.034200 0.000000;...
//            670 0.087400 0.032000 0.000000;...
//            671 0.081901 0.029963 0.000000;...
//            672 0.076804 0.028077 0.000000;...
//            673 0.072077 0.026329 0.000000;...
//            674 0.067687 0.024708 0.000000;...
//            675 0.063600 0.023200 0.000000;...
//            676 0.059807 0.021801 0.000000;...
//            677 0.056282 0.020501 0.000000;...
//            678 0.052971 0.019281 0.000000;...
//            679 0.049819 0.018121 0.000000;...
//            680 0.046770 0.017000 0.000000;...
//            681 0.043784 0.015904 0.000000;...
//            682 0.040875 0.014837 0.000000;...
//            683 0.038073 0.013811 0.000000;...
//            684 0.035405 0.012835 0.000000;...
//            685 0.032900 0.011920 0.000000;...
//            686 0.030564 0.011068 0.000000;...
//            687 0.028381 0.010273 0.000000;...
//            688 0.026345 0.009533 0.000000;...
//            689 0.024453 0.008846 0.000000;...
//            690 0.022700 0.008210 0.000000;...
//            691 0.021084 0.007624 0.000000;...
//            692 0.019600 0.007085 0.000000;...
//            693 0.018237 0.006591 0.000000;...
//            694 0.016987 0.006138 0.000000;...
//            695 0.015840 0.005723 0.000000;...
//            696 0.014791 0.005343 0.000000;...
//            697 0.013831 0.004996 0.000000;...
//            698 0.012949 0.004676 0.000000;...
//            699 0.012129 0.004380 0.000000;...
//            700 0.011359 0.004102 0.000000;...
//            701 0.010629 0.003838 0.000000;...
//            702 0.009939 0.003589 0.000000;...
//            703 0.009288 0.003354 0.000000;...
//            704 0.008679 0.003134 0.000000;...
//            705 0.008111 0.002929 0.000000;...
//            706 0.007582 0.002738 0.000000;...
//            707 0.007089 0.002560 0.000000;...
//            708 0.006627 0.002393 0.000000;...
//            709 0.006195 0.002237 0.000000;...
//            710 0.005790 0.002091 0.000000;...
//            711 0.005410 0.001954 0.000000;...
//            712 0.005053 0.001825 0.000000;...
//            713 0.004718 0.001704 0.000000;...
//            714 0.004404 0.001590 0.000000;...
//            715 0.004109 0.001484 0.000000;...
//            716 0.003834 0.001384 0.000000;...
//            717 0.003576 0.001291 0.000000;...
//            718 0.003334 0.001204 0.000000;...
//            719 0.003109 0.001123 0.000000;...
//            720 0.002899 0.001047 0.000000;...
//            721 0.002704 0.000977 0.000000;...
//            722 0.002523 0.000911 0.000000;...
//            723 0.002354 0.000850 0.000000;...
//            724 0.002197 0.000793 0.000000;...
//            725 0.002049 0.000740 0.000000;...
//            726 0.001911 0.000690 0.000000;...
//            727 0.001781 0.000643 0.000000;...
//            728 0.001660 0.000599 0.000000;...
//            729 0.001546 0.000558 0.000000;...
//            730 0.001440 0.000520 0.000000;...
//            731 0.001340 0.000484 0.000000;...
//            732 0.001246 0.000450 0.000000;...
//            733 0.001158 0.000418 0.000000;...
//            734 0.001076 0.000389 0.000000;...
//            735 0.001000 0.000361 0.000000;...
//            736 0.000929 0.000335 0.000000;...
//            737 0.000862 0.000311 0.000000;...
//            738 0.000801 0.000289 0.000000;...
//            739 0.000743 0.000268 0.000000;...
//            740 0.000690 0.000249 0.000000;...
//            741 0.000641 0.000231 0.000000;...
//            742 0.000595 0.000215 0.000000;...
//            743 0.000552 0.000199 0.000000;...
//            744 0.000512 0.000185 0.000000;...
//            745 0.000476 0.000172 0.000000;...
//            746 0.000442 0.000160 0.000000;...
//            747 0.000412 0.000149 0.000000;...
//            748 0.000383 0.000138 0.000000;...
//            749 0.000357 0.000129 0.000000;...
//            750 0.000332 0.000120 0.000000;...
//            751 0.000310 0.000112 0.000000;...
//            752 0.000289 0.000104 0.000000;...
//            753 0.000270 0.000097 0.000000;...
//            754 0.000252 0.000091 0.000000;...
//            755 0.000235 0.000085 0.000000;...
//            756 0.000219 0.000079 0.000000;...
//            757 0.000205 0.000074 0.000000;...
//            758 0.000191 0.000069 0.000000;...
//            759 0.000178 0.000064 0.000000;...
//            760 0.000166 0.000060 0.000000;...
//            761 0.000155 0.000056 0.000000;...
//            762 0.000145 0.000052 0.000000;...
//            763 0.000135 0.000049 0.000000;...
//            764 0.000126 0.000045 0.000000;...
//            765 0.000117 0.000042 0.000000;...
//            766 0.000110 0.000040 0.000000;...
//            767 0.000102 0.000037 0.000000;...
//            768 0.000095 0.000034 0.000000;...
//            769 0.000089 0.000032 0.000000;...
//            770 0.000083 0.000030 0.000000;...
//            771 0.000078 0.000028 0.000000;...
//            772 0.000072 0.000026 0.000000;...
//            773 0.000067 0.000024 0.000000;...
//            774 0.000063 0.000023 0.000000;...
//            775 0.000059 0.000021 0.000000;...
//            776 0.000055 0.000020 0.000000;...
//            777 0.000051 0.000018 0.000000;...
//            778 0.000048 0.000017 0.000000;...
//            779 0.000044 0.000016 0.000000;...
//            780 0.000042 0.000015 0.000000;...
//            781 0.000039 0.000014 0.000000;...
//            782 0.000036 0.000013 0.000000;...
//            783 0.000034 0.000012 0.000000;...
//            784 0.000031 0.000011 0.000000;...
//            785 0.000029 0.000011 0.000000;...
//            786 0.000027 0.000010 0.000000;...
//            787 0.000026 0.000009 0.000000;...
//            788 0.000024 0.000009 0.000000;...
//            789 0.000022 0.000008 0.000000;...
//            790 0.000021 0.000007 0.000000;...
//            791 0.000019 0.000007 0.000000;...
//            792 0.000018 0.000006 0.000000;...
//            793 0.000017 0.000006 0.000000;...
//            794 0.000016 0.000006 0.000000;...
//            795 0.000015 0.000005 0.000000;...
//            796 0.000014 0.000005 0.000000;...
//            797 0.000013 0.000005 0.000000;...
//            798 0.000012 0.000004 0.000000;...
//            799 0.000011 0.000004 0.000000;...
//            800 0.000010 0.000004 0.000000;...
//            801 0.000010 0.000003 0.000000;...
//            802 0.000009 0.000003 0.000000;...
//            803 0.000008 0.000003 0.000000;...
//            804 0.000008 0.000003 0.000000;...
//            805 0.000007 0.000003 0.000000;...
//            806 0.000007 0.000002 0.000000;...
//            807 0.000006 0.000002 0.000000;...
//            808 0.000006 0.000002 0.000000;...
//            809 0.000005 0.000002 0.000000;...
//            810 0.000005 0.000002 0.000000;...
//            811 0.000005 0.000002 0.000000;...
//            812 0.000004 0.000002 0.000000;...
//            813 0.000004 0.000001 0.000000;...
//            814 0.000004 0.000001 0.000000;...
//            815 0.000004 0.000001 0.000000;...
//            816 0.000003 0.000001 0.000000;...
//            817 0.000003 0.000001 0.000000;...
//            818 0.000003 0.000001 0.000000;...
//            819 0.000003 0.000001 0.000000;...
//            820 0.000003 0.000001 0.000000;...
//            821 0.000002 0.000001 0.000000;...
//            822 0.000002 0.000001 0.000000;...
//            823 0.000002 0.000001 0.000000;...
//            824 0.000002 0.000001 0.000000;...
//            825 0.000002 0.000001 0.000000;...
//            826 0.000002 0.000001 0.000000;...
//            827 0.000002 0.000001 0.000000;...
//            828 0.000001 0.000001 0.000000;...
//            829 0.000001 0.000000 0.000000;...
//            830 0.000001 0.000000 0.000000];
//        wavelength = CIE31Table(:,1);
//        xbar = CIE31Table(:,2);
//        ybar = CIE31Table(:,3);
//        zbar = CIE31Table(:,4);


//% The spectral reflectance data of 14 color test samples for CRI
//% [wavelength (nm) TCS1 TCS2 TCS3 ... TCS14]
//TCS =  [360 116  53  58  57 143  79 150  75  69  42  74 189  71  36;...
//        365 136  55  59  59 187  81 177  78  72  43  79 175  76  36;...
//        370 159  59  61  62 233  89 218  84  73  45  86 158  82  36;...
//        375 190  64  63  67 269 113 293  90  70  47  98 139  90  36;...
//        380 219  70  65  74 295 151 378 104  66  50 111 120 104  36;...
//        385 239  79  68  83 306 203 459 129  62  54 121 103 127  36;...
//        390 252  89  70  93 310 265 524 170  58  59 127  90 161  37;...
//        395 256 101  72 105 312 339 546 240  55  63 129  82 211  38;...
//        400 256 111  73 116 313 410 551 319  52  66 127  76 264  39;...
//        405 254 116  73 121 315 464 555 416  52  67 121  68 313  39;...
//        410 252 118  74 124 319 492 559 462  51  68 116  64 341  40;...
//        415 248 120  74 126 322 508 560 482  50  69 112  65 352  41;...
//        420 244 121  74 128 326 517 561 490  50  69 108  75 359  42;...
//        425 240 122  73 131 330 524 558 488  49  70 105  93 361  42;...
//        430 237 122  73 135 334 531 556 482  48  72 104 123 364  43;...
//        435 232 122  73 139 339 538 551 473  47  73 104 160 365  44;...
//        440 230 123  73 144 346 544 544 462  46  76 105 207 367  44;...
//        445 226 124  73 151 352 551 535 450  44  78 106 256 369  45;...
//        450 225 127  74 161 360 556 522 439  42  83 110 300 372  45;...
//        455 222 128  75 172 369 556 506 426  41  88 115 331 374  46;...
//        460 220 131  77 186 381 554 488 413  38  95 123 346 376  47;...
//        465 218 134  80 205 394 549 469 397  35 103 134 347 379  48;...
//        470 216 138  85 229 403 541 448 382  33 113 148 341 384  50;...
//        475 214 143  94 254 410 531 429 366  31 125 167 328 389  52;...
//        480 214 150 109 281 415 519 408 352  30 142 192 307 397  55;...
//        485 214 159 126 308 418 504 385 337  29 162 219 282 405  57;...
//        490 216 174 148 332 419 488 363 325  28 189 252 257 416  62;...
//        495 218 190 172 352 417 469 341 310  28 219 291 230 429  67;...
//        500 223 207 198 370 413 450 324 299  28 262 325 204 443  75;...
//        505 225 225 221 383 409 431 311 289  29 305 347 178 454  83;...
//        510 226 242 241 390 403 414 301 283  30 365 356 154 461  92;...
//        515 226 253 260 394 396 395 291 276  30 416 353 129 466 100;...
//        520 225 260 278 395 389 377 283 270  31 465 346 109 469 108;...
//        525 225 264 302 392 381 358 273 262  31 509 333  90 471 121;...
//        530 227 267 339 385 372 341 265 256  32 546 314  75 474 133;...
//        535 230 269 370 377 363 325 260 251  32 581 294  62 476 142;...
//        540 236 272 392 367 353 309 257 250  33 610 271  51 483 150;...
//        545 245 276 399 354 342 293 257 251  34 634 248  41 490 154;...
//        550 253 282 400 341 331 279 259 254  35 653 227  35 506 155;...
//        555 262 289 393 327 320 265 260 258  37 666 206  29 526 152;...
//        560 272 299 380 312 308 253 260 264  41 678 188  25 553 147;...
//        565 283 309 365 296 296 241 258 269  44 687 170  22 582 140;...
//        570 298 322 349 280 284 234 256 272  48 693 153  19 618 133;...
//        575 318 329 332 263 271 227 254 274  52 698 138  17 651 125;...
//        580 341 335 315 247 260 225 254 278  60 701 125  17 680 118;...
//        585 367 339 299 229 247 222 259 284  76 704 114  17 701 112;...
//        590 390 341 285 214 232 221 270 295 102 705 106  16 717 106;...
//        595 409 341 272 198 220 220 284 316 136 705 100  16 729 101;...
//        600 424 342 264 185 210 220 302 348 190 706  96  16 736  98;...
//        605 435 342 257 175 200 220 324 384 256 707  92  16 742  95;...
//        610 442 342 252 169 194 220 344 434 336 707  90  16 745  93;...
//        615 448 341 247 164 189 220 362 482 418 707  87  16 747  90;...
//        620 450 341 241 160 185 223 377 528 505 708  85  16 748  89;...
//        625 451 339 235 156 183 227 389 568 581 708  82  16 748  87;...
//        630 451 339 229 154 180 233 400 604 641 710  80  18 748  86;...
//        635 451 338 224 152 177 239 410 629 682 711  79  18 748  85;...
//        640 451 338 220 151 176 244 420 648 717 712  78  18 748  84;...
//        645 451 337 217 149 175 251 429 663 740 714  78  18 748  84;...
//        650 450 336 216 148 175 258 438 676 758 716  78  19 748  84;...
//        655 450 335 216 148 175 263 445 685 770 718  78  20 748  84;...
//        660 451 334 219 148 175 268 452 693 781 720  81  23 747  85;...
//        665 451 332 224 149 177 273 457 700 790 722  83  24 747  87;...
//        670 453 332 230 151 180 278 462 705 797 725  88  26 747  92;...
//        675 454 331 238 154 183 281 466 709 803 729  93  30 747  96;...
//        680 455 331 251 158 186 283 468 712 809 731 102  35 747 102;...
//        685 457 330 269 162 189 286 470 715 814 735 112  43 747 110;...
//        690 458 329 288 165 192 291 473 717 819 739 125  56 747 123;...
//        695 460 328 312 168 195 296 477 719 824 742 141  74 746 137;...
//        700 462 328 340 170 199 302 483 721 828 746 161  97 746 152;...
//        705 463 327 366 171 200 313 489 720 830 748 182 128 746 169;...
//        710 464 326 390 170 199 325 496 719 831 749 203 166 745 188;...
//        715 465 325 412 168 198 338 503 722 833 751 223 210 744 207;...
//        720 466 324 431 166 196 351 511 725 835 753 242 257 743 226;...
//        725 466 324 447 164 195 364 518 727 836 754 257 305 744 243;...
//        730 466 324 460 164 195 376 525 729 836 755 270 354 745 260;...
//        735 466 323 472 165 196 389 532 730 837 755 282 401 748 277;...
//        740 467 322 481 168 197 401 539 730 838 755 292 446 750 294;...
//        745 467 321 488 172 200 413 546 730 839 755 302 485 750 310;...
//        750 467 320 493 177 203 425 553 730 839 756 310 520 749 325;...
//        755 467 318 497 181 205 436 559 730 839 757 314 551 748 339;...
//        760 467 316 500 185 208 447 565 730 839 758 317 577 748 353;...
//        765 467 315 502 189 212 458 570 730 839 759 323 599 747 366;...
//        770 467 315 505 192 215 469 575 730 839 759 330 618 747 379;...
//        775 467 314 510 194 217 477 578 730 839 759 334 633 747 390;...
//        780 467 314 516 197 219 485 581 730 839 759 338 645 747 399;...
//        785 467 313 520 200 222 493 583 730 839 759 343 656 746 408;...
//        790 467 313 524 204 226 500 585 731 839 759 348 666 746 416;...
//        795 466 312 527 210 231 506 587 731 839 759 353 674 746 422;...
//        800 466 312 531 218 237 512 588 731 839 759 359 680 746 428;...
//        805 466 311 535 225 243 517 589 731 839 759 365 686 745 434;...
//        810 466 311 539 233 249 521 590 731 838 758 372 691 745 439;...
//        815 466 311 544 243 257 525 590 731 837 757 380 694 745 444;...
//        820 465 311 548 254 265 529 590 731 837 757 388 697 745 448;...
//        825 464 311 552 264 273 532 591 731 836 756 396 700 745 451;...
//        830 464 310 555 274 280 535 592 731 836 756 403 702 745 454];
//TCS(:,2:end) = TCS(:,2:end)/1000;

//% Data for isotemperature lines needed for calculating correlated color temperature

//% The following provides a table of isotemperature lines for use with the Robertson Method
//% (Robertson, 1968) to interpolate isotemperature lines from the CIE 1960 UCS.
//% The spacing of the isotemp lines is very small (1 1/MK) so very little
//% interpolation is actually needed for determining CCT. The latest (2002)
//% recommended values for the physical constants determining blackbody
//% radiation spectra are used

//dwave = wavelength(2)-wavelength(1); % wavelength increment = 1 nm

//ubar = (2/3)*xbar;
//vbar = ybar;
//wbar = -0.5*xbar + (3/2)*ybar + 0.5*zbar;

//% 2002 CODATA recommended values
//h = 6.6260693e-34;
//c = 299792458;
//k = 1.3806505e-23;
//c1 = 2*pi*h*c^2;
//c2 = h*c/k;

//MrecpK = [0.01 1:600]; % mega reciprical Kelvin values of isotemperature lines
//T = 1./(MrecpK*1e-6);
//for i = 1:length(T)
//   spdref = c1 * (1e-9*wavelength).^-5 ./ (exp(c2./(T(i).* 1e-9*wavelength)) - 1);
//   spdref = spdref/max(spdref);
//   wave = wavelength*1e-9;

//   % Equations from Wyszecki and Sitles, Color Science, 2nd ed. 1982, page
//   % 226 and 227
//   U = sum(spdref.*ubar);
//   V = sum(spdref.*vbar);
//   W = sum(spdref.*wbar);
//   R = U+V+W;
//   u(i) = U/R;
//   v(i) = V/R;

//   Uprime = c1*c2*(T(i))^-2*sum(wave.^-6.*ubar.*exp(c2./(wave.*T(i))).*(exp(c2./(wave.*(T(i))))-1).^-2)*dwave;
//   Vprime = sum(c1*c2*T(i)^-2*wave.^-6.*vbar.*exp(c2./(wave.*T(i))).*(exp(c2./(wave.*(T(i))))-1).^-2)*dwave;
//   Wprime = sum(c1*c2*T(i)^-2*wave.^-6.*wbar.*exp(c2./(wave.*T(i))).*(exp(c2./(wave.*(T(i))))-1).^-2)*dwave;
//   Rprime = Uprime+Vprime+Wprime;

//   sl(i) = (Vprime*R-V*Rprime)/(Uprime*R-U*Rprime);
//   m(i) = -1/sl(i);
//end
//ut = u;
//vt = v;
//tt = m;
//isoTempLinesTable = [T' u' v' m'];
//%save isoTempLinesNewestFine.txt isoTempLinesTable -ascii; % Optionally save file

//% Second, calculate Correlated Color Temperature (CCT), Tc

//%load ('isoTempLinesNewestFine.mat', 'T', 'ut', 'vt', 'tt'); % If read from previously saved file

//% Interpolate CIE functions to spd increments
//xbar = interp1(wavelength,xbar,wavelength_spd);
//xbar(isnan(xbar)) = 0.0;
//ybar = interp1(wavelength,ybar,wavelength_spd);
//ybar(isnan(ybar)) = 0.0;
//zbar = interp1(wavelength,zbar,wavelength_spd);
//zbar(isnan(zbar)) = 0.0;
//% Calculate Chromaticity Coordinates
//X = trapz(wavelength_spd,spd.*xbar);
//Y = trapz(wavelength_spd,spd.*ybar);
//Z = trapz(wavelength_spd,spd.*zbar);
//x = X/(X+Y+Z);
//y = Y/(X+Y+Z);
//u = 4*x/(-2*x+12*y+3);
//v = 6*y/(-2*x+12*y+3);
//fprintf(1,'x = %.4f\ty = %.4f\n',x,y);

//% Find adjacent lines to (us, vs)
//n = length (T);
//index = 0;
//d1 = ((v-vt(1)) - tt(1)*(u-ut(1)))/sqrt(1+tt(1)*tt(1));
//for i=2:n
//    d2 = ((v-vt(i)) - tt(i)*(u-ut(i)))/sqrt(1+tt(i)*tt(i));
//    if (d1/d2 < 0)
//        index = i;
//        break;
//    else
//        d1 = d2;
//    end
//end
//if index == 0
//    Tc = -1; % Not able to calculate CCT, u, v coordinates outside range.
//    fprintf(1,'Not able to calculate CCT, u, v coordinates outside range.\n');
//    %return
//else
//    % Calculate CCT by interpolation between isotemperature lines
//    Tc = 1/(1/T(index-1)+d1/(d1-d2)*(1/T(index)-1/T(index-1)));
//    fprintf(1,'CCT = %.1f\n',Tc);
//end

//% Third, calculate the Color Rendering Indices (CRI and its 14 indices)
//% Calculate Reference Source Spectrum, spdref.
//if (Tc < 5000)
//    c1 = 3.7418e-16;
//    c2 = 1.4388e-2;
//    spdref = c1 * (1e-9*wavelength_spd).^-5 ./ (exp(c2./(Tc.* 1e-9*wavelength_spd)) - 1);
//else
//    if (Tc <= 25000)
//        load('CIEDaySn','wavelength','S0','S1','S2');
//        if (Tc <= 7000)
//            xd = -4.6070e9 / Tc.^3 + 2.9678e6 / Tc.^2 + 0.09911e3 / Tc + 0.244063;
//        else
//            xd = -2.0064e9 / Tc.^3 + 1.9018e6 / Tc.^2 + 0.24748e3 / Tc + 0.237040;
//        end
//        yd = -3.000*xd*xd + 2.870*xd - 0.275;
//        M1 = (-1.3515 - 1.7703*xd + 5.9114*yd) / (0.0241 + 0.2562*xd - 0.7341*yd);
//        M2 = (0.0300 - 31.4424*xd + 30.0717*yd) / (0.0241 + 0.2562*xd - 0.7341*yd);
//        spdref = S0 + M1*S1 + M2*S2;
//        spdref = interp1(wavelength,spdref,wavelength_spd);
//        spdref(isnan(spdref)) = 0.0;
//    else
//        R = -1;
//        return
//    end
//end

//% Interpolate TCS values from 5 nm to spd nm increments
//TCS_1 = zeros(length(wavelength_spd),14);
//for i = 1:14
//    TCS_1(:,i) = interp1(TCS(:,1),TCS(:,i+1),wavelength_spd,'linear',0);
//end

//% Calculate u, v chromaticity coordinates of samples under test illuminant, uk, vk and
//% reference illuminant, ur, vr.
//uki = zeros(1,14);
//vki = zeros(1,14);
//uri = zeros(1,14);
//vri = zeros(1,14);
//X = trapz(wavelength_spd,spd .* xbar);
//Y = trapz(wavelength_spd,spd .* ybar);
//Z = trapz(wavelength_spd,spd .* zbar);
//Yknormal = 100 / Y;
//Yk = Y*Yknormal;
//uk = 4*X/(X+15*Y+3*Z);
//vk = 6*Y/(X+15*Y+3*Z);
//X = trapz(wavelength_spd,spdref .* xbar);
//Y = trapz(wavelength_spd,spdref .* ybar);
//Z = trapz(wavelength_spd,spdref .* zbar);
//Yrnormal = 100 / Y;
//Yr = Y*Yrnormal;
//ur = 4*X/(X+15*Y+3*Z);
//vr = 6*Y/(X+15*Y+3*Z);
//for i = 1:14
//	X = trapz(wavelength_spd,spd .* TCS_1(:,i) .* xbar);
//	Y = trapz(wavelength_spd,spd .* TCS_1(:,i) .* ybar);
//	Z = trapz(wavelength_spd,spd .* TCS_1(:,i) .* zbar);
//	Yki(i) = Y*Yknormal;
//	uki(i) = 4*X/(X+15*Y+3*Z);
//	vki(i) = 6*Y/(X+15*Y+3*Z);
//	X = trapz(wavelength_spd,spdref .* TCS_1(:,i) .* xbar);
//	Y = trapz(wavelength_spd,spdref .* TCS_1(:,i) .* ybar);
//	Z = trapz(wavelength_spd,spdref .* TCS_1(:,i) .* zbar);
//	Yri(i) = Y*Yrnormal;
//	uri(i) = 4*X/(X+15*Y+3*Z);
//	vri(i) = 6*Y/(X+15*Y+3*Z);
//end
//% Check tolorence for reference illuminant
//DC = sqrt((uk-ur).^2 + (vk-vr).^2);

//% Apply adaptive (perceived) color shift.
//ck = (4 - uk - 10*vk) / vk;
//dk = (1.708*vk + 0.404 - 1.481*uk) / vk;
//cr = (4 - ur - 10*vr) / vr;
//dr = (1.708*vr + 0.404 - 1.481*ur) / vr;

//for i = 1:14
//	cki = (4 - uki(i) - 10*vki(i)) / vki(i);
//	dki = (1.708*vki(i) + 0.404 - 1.481*uki(i)) / vki(i);
//	ukip(i) = (10.872 + 0.404*cr/ck*cki - 4*dr/dk*dki) / (16.518 + 1.481*cr/ck*cki - dr/dk*dki);
//	vkip(i) = 5.520 / (16.518 + 1.481*cr/ck*cki - dr/dk*dki);
//end

//%  Transformation into 1964 Uniform space coordinates.
//for i = 1:14
//	Wstarr(i) = 25*Yri(i).^.333333 - 17;
//	Ustarr(i) = 13*Wstarr(i)*(uri(i) - ur);
//	Vstarr(i) = 13*Wstarr(i)*(vri(i) - vr);

//	Wstark(i) = 25*Yki(i).^.333333 - 17;
//	Ustark(i) = 13*Wstark(i)*(ukip(i) - ur); % after applying the adaptive color shift, u'k = ur
//	Vstark(i) = 13*Wstark(i)*(vkip(i) - vr); % after applying the adaptive color shift, v'k = vr
//end

//% Determination of resultant color shift, delta E.
//deltaE = zeros(1,14);
//R = zeros(1,14);
//for i = 1:14
//	deltaE(i) = sqrt((Ustarr(i) - Ustark(i)).^2 + (Vstarr(i) - Vstark(i)).^2 + (Wstarr(i) - Wstark(i)).^2);
//	R(i) = 100 - 4.6*deltaE(i);
//end
//Ra = sum(R(1:8))/8;
//fprintf(1,'CRIra = %.1f\n',Ra);

//% fourth, calculate the gamut area formed by the 8 CIE standard color samples
//ukii=[uki(:,1:8),uki(1)];
//vkii=1.5*[vki(:,1:8),vki(1)];
//Ga=polyarea(ukii,vkii);
//% Normalize gamut area to equal energy source
//Ga=Ga/0.00728468*100;
//fprintf(1,'Gamut Area Index = %.1f\n',Ga);

//% Fifth, calculate the FSI (full spectrum index)
//% Calculates the Full-spectrum Index

//% Interpolate to wavelength interval of 1nm from 380nm to 730nm
//numWave = 351;
//t=(380:1:730)';
//spd=interp1(wavelength_spd,spd,t,'spline');
//spd(isnan(spd)) = 0.0;
//spd = spd/sum(spd); % Normalize the relative spd so that the total power equals 1
//%Equal energy cumulative spd
//EEcum=(1/numWave:1/numWave:1)';
//%Calculate FSI

//for j=1:numWave
//cum = cumsum(spd); % A MatLab function for cumulative sums
//sqrDiff = (cum-EEcum).^2;
//sumSqrDiff(j)=sum(sqrDiff);
//spd=circshift(spd,1);
//end
//FSI=mean(sumSqrDiff);
//FSCI=100-5.1*FSI;
//fprintf(1,'FSCI = %.3f\n',FSCI);
